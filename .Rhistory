powerPlot <- function(powerCurve, power_threshold = 80) {
powerplot <- ggplot(powerSims, aes(x = EffectSize, y = Power)) +
geom_point(color = "blue") + geom_line(color="blue") +
theme_minimal() +
labs(x = "Effect Size (standardized regression coefficients)", y = "Power", title = "Power Analysis Plot") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = power_threshold, color = "red", linetype = "dashed") + scale_x_continuous(breaks = seq(.01, .1, by = .01)) + annotate("text", x = .01, y = power_threshold, label = paste(power_threshold,  "% power"), hjust = 0, vjust = -1, color = "red")
}
simCurve <- function(group_count, #Number of individuals
within_count, #Number of observations per individual
within_between_varying = F,
within_between_matrix = NA,
slopes = c(), #Fixed effects slopes for which power will be calculated
res, #Residual Variance
nsim = 1000, #Number of simulations for each power calculation
verbose = F,
randomIntercept = 0,
randomSlope = NA){ #Random intercept variance
X <- rnorm(group_count * within_count) #Generating random values for predictor variable
id <- rep(1:group_count, each = within_count) #Generating individual ids
time <- rep(1:within_count, n = group_count) #Generating timepoints for each observation
covars <- data.frame(id, time, X = X) #Generating predictor dataset
powers <- data.frame("EffectSize" = slopes, "Power" = rep(0, length(slopes))) #Generating dataframe to contain calculated effect sizes
if (is.na(randomSlope)) {
randomSlope <- 0 #Set random slope variance to 0 by default
}
for (i in slopes) {
fixed <- c(0, i) #Set fixed intercept and slope
model <- makeLmer(y ~ X + (1|id), fixef = fixed, VarCorr = randomIntercept,  sigma = res,  data = covars) #Create Lmer model for fixed+random effects structure of interest
sim_X <- powerSim(model, nsim = nsim, test = fixed("X", method = "t"), seed = 1234) #Generate power simulation for model defined above
if(verbose == T){print(sim_X)} #print power simulation full results if verbose==T
powers[powers$EffectSize == i,]$Power <- (sim_X$x) / (nsim/100) #Record power observed
}
return(powers)
}
powerSims <- simCurve(group_count = group_count,
within_count = within_count,
slopes = slopes,
res = res,
randomIntercept = randomIntercept,
verbose = F, #Set to 'TRUE' to see full information for power calculations
nsim = 10)
group_count = 41 #Number of subjects
within_count = 22 #Observations per subject
slopes = seq(.01, .1, by=.01) #generate desired fixed effect slopes to be tested
res = .34 #Set residual variance
randomIntercept = .67 #Set random intercept variance
powerSims <- simCurve(group_count = group_count,
within_count = within_count,
slopes = slopes,
res = res,
randomIntercept = randomIntercept,
verbose = F, #Set to 'TRUE' to see full information for power calculations
nsim = 10)
require(ggplot2)
powerPlot <- function(powerCurve, power_threshold = 80) {
powerplot <- ggplot(powerSims, aes(x = EffectSize, y = Power)) +
geom_point(color = "blue") + geom_line(color="blue") +
theme_minimal() +
labs(x = "Effect Size (standardized regression coefficients)", y = "Power", title = "Power Analysis Plot") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = power_threshold, color = "red", linetype = "dashed") + scale_x_continuous(breaks = seq(.01, .1, by = .01)) + annotate("text", x = .01, y = power_threshold, label = paste(power_threshold,  "% power"), hjust = 0, vjust = -1, color = "red")
}
require(lmerTest)
simCurve <- function(group_count, #Number of individuals
within_count, #Number of observations per individual
within_between_varying = F,
within_between_matrix = NA,
slopes = c(), #Fixed effects slopes for which power will be calculated
res, #Residual Variance
nsim = 1000, #Number of simulations for each power calculation
verbose = F,
randomIntercept = 0,
randomSlope = NA){ #Random intercept variance
X <- rnorm(group_count * within_count) #Generating random values for predictor variable
id <- rep(1:group_count, each = within_count) #Generating individual ids
time <- rep(1:within_count, n = group_count) #Generating timepoints for each observation
covars <- data.frame(id, time, X = X) #Generating predictor dataset
powers <- data.frame("EffectSize" = slopes, "Power" = rep(0, length(slopes))) #Generating dataframe to contain calculated effect sizes
if (is.na(randomSlope)) {
randomSlope <- 0 #Set random slope variance to 0 by default
}
for (i in slopes) {
fixed <- c(0, i) #Set fixed intercept and slope
model <- makeLmer(y ~ X + (1|id), fixef = fixed, VarCorr = randomIntercept,  sigma = res,  data = covars) #Create Lmer model for fixed+random effects structure of interest
sim_X <- powerSim(model, nsim = nsim, test = fixed("X", method = "t"), seed = 1234) #Generate power simulation for model defined above
if(verbose == T){print(sim_X)} #print power simulation full results if verbose==T
powers[powers$EffectSize == i,]$Power <- (sim_X$x) / (nsim/100) #Record power observed
}
return(powers)
}
require(ggplot2)
powerPlot <- function(powerCurve, power_threshold = 80) {
powerplot <- ggplot(powerSims, aes(x = EffectSize, y = Power)) +
geom_point(color = "blue") + geom_line(color="blue") +
theme_minimal() +
labs(x = "Effect Size (standardized regression coefficients)", y = "Power", title = "Power Analysis Plot") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = power_threshold, color = "red", linetype = "dashed") + scale_x_continuous(breaks = seq(.01, .1, by = .01)) + annotate("text", x = .01, y = power_threshold, label = paste(power_threshold,  "% power"), hjust = 0, vjust = -1, color = "red")
}
group_count = 41 #Number of subjects
within_count = 22 #Observations per subject
slopes = seq(.01, .1, by=.01) #generate desired fixed effect slopes to be tested
res = .34 #Set residual variance
randomIntercept = .67 #Set random intercept variance
powerSims <- simCurve(group_count = group_count,
within_count = within_count,
slopes = slopes,
res = res,
randomIntercept = randomIntercept,
verbose = F, #Set to 'TRUE' to see full information for power calculations
nsim = 10)
require(simr)
powerSims <- simCurve(group_count = group_count,
within_count = within_count,
slopes = slopes,
res = res,
randomIntercept = randomIntercept,
verbose = F, #Set to 'TRUE' to see full information for power calculations
nsim = 10)
powerPlot(powerSims)
powerPlot <- function(powerCurve, power_threshold = 80) {
powerplot <- ggplot(powerSims, aes(x = EffectSize, y = Power)) +
geom_point(color = "blue") + geom_line(color="blue") +
theme_minimal() +
labs(x = "Effect Size (standardized regression coefficients)", y = "Power", title = "Power Analysis Plot") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = power_threshold, color = "red", linetype = "dashed") + scale_x_continuous(breaks = seq(.01, .1, by = .01)) + annotate("text", x = .01, y = power_threshold, label = paste(power_threshold,  "% power"), hjust = 0, vjust = -1, color = "red")
return(powerplot)
}
powerPlot(powerSims)
powerPlot(powerSims, power_threshold = 50)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(LmerPowerCurve)
library(LmerPowerCurve)
